{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Svelte Tutorials","title":"Home"},{"location":"#welcome-svelte-tutorials","text":"","title":"Welcome Svelte Tutorials"},{"location":"flappybird/","text":"How to build a flappy bird game in svelte with typescript Youtube Video Final Demo Demo Code Other Demo Demo Code Steps 1. Create the svelte project. 1 npx degit sveltejs/template . 2. Turn the project into a typescript project. (It will be nice to have interfaces) 1 node scripts/setupTypeScript.js 3. Run npm install to install the dependencies. 1 npm install 4. Clean up the project Delete everything in the public/global.css Make all the links relative in the public/index.html Change the title in the index.html file to Svelte Flappy Bird Delete everything in our src/App.svelte file index.html file 1 2 3 4 5 6 7 8 9 10 < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width,initial-scale=1\" /> < title > Svelte Flappy Bird </ title > < link rel = \"icon\" type = \"image/png\" href = \"/favicon.png\" /> < link rel = \"stylesheet\" href = \"/global.css\" /> < link rel = \"stylesheet\" href = \"/build/bundle.css\" /> < script defer src = \"/build/bundle.js\" ></ script > 5. Create a file name game.ts and copy the frame interface into file. This is will be used to render the game. 1 2 3 4 5 6 7 export interface Frame { gameOver : boolean ; gameStarted : boolean ; width : number ; height : number ; score : number ; } 6. Create a game class. Is is what is used to generate the frames and is where all of our game logic will be stored. For now our game controller will take in a width and height value. 1 export class GameController {} 7. Let's create a constructor that takes in width, height as public readonly variables. We'll also create private class variables that will store the frame and velocity. 1 2 3 4 5 6 7 class GameController { private frame : Frame ; private velocity = 0 ; constructor ( public readonly height = 800 , public readonly width = 400 ) {} } 8. Create a method called newGame. This will save a new frame to the frame class variable and return the newly created frame. We don't want to start the game until the user presses a button so we'll default gameOver and gameStarted to false. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 export class GameController { private frame : Frame ; private velocity = 0 ; constructor ( public readonly height = 800 , public readonly width = 400 ) {} public newGame () { this . frame = { score : 0 , width : this.width , height : this.height , gameOver : false , gameStarted : false , }; return this . frame ; } } 9. We'll use this create a game.svelte component to render the game onto the screen. Game.svelte 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 < script lang = \"ts\" > import { GameController } from \"./game\" ; const game = new GameController (); let frame = game . newGame (); </ script > < style > main { position : relative ; border : solid black 1 px ; overflow : hidden ; background-color : lightblue ; } </ style > < main style = \"width: {frame.width}px; height: {frame.height}px;\" class = \"game\" ></ main > App.svelte 1 2 3 4 5 < script lang = \"ts\" > import Game from \"./Game.svelte\" ; </ script > < Game /> It should look like this. 10. Add interfaces for the pipes so we can start moving the pipes across the screen. Modify the frame frame to accept 2 pipes. A firstPipe and second Pipe. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 export interface Frame { firstPipe : PipePair ; secondPipe : PipePair ; gameOver : boolean ; gameStarted : boolean ; width : number ; height : number ; score : number ; } export interface PipePair { topPipe : Pipe ; bottomPipe : Pipe ; show : boolean ; left : number ; width : number ; } export interface Pipe { top : number ; height : number ; } 11. Modify the GameController contrustor to take in more pipe parameters. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 export class GameController { private frame : Frame ; private velocity = 0 ; constructor ( public readonly height = 800 , public readonly width = 400 , public readonly pipeWidth = 50 , public readonly pipeGap = 150 , public readonly minTopForTopPipe = 70 , public readonly maxTopForTopPipe = 350 ) {} public newGame () { this . frame = { score : 0 , width : this.width , height : this.height , gameOver : false , gameStarted : false , }; return this . frame ; } } 12. Next create a private method to generate a random length of pipe between our minTopForTopPipe and maxTopForTopPipe. 1 2 3 4 5 6 private randomYForTopPipe () : number { return ( this . minTopForTopPipe + ( this . maxTopForTopPipe - this . minTopForTopPipe ) * Math . random () ); } 13. Using the function created previously we can now create a private method for creating a pipe. Show will determine if the pipe is visible on the screen. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 private createPipe ( show : boolean ) : PipePair { const height = this . randomYForTopPipe (); return { topPipe : { top : 0 , height , }, bottomPipe : { top : height + this . pipeGap , height : this.height , }, left : this.width - this . pipeWidth , width : this.pipeWidth , show , }; } 14. Modify the new game function to create pipe objects. We only want one of the pipes visible to start. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public newGame () { let firstPipe = this . createPipe ( true ); let secondPipe = this . createPipe ( false ); this . frame = { firstPipe , secondPipe , score : 0 , width : this.width , height : this.height , gameOver : false , gameStarted : false , }; return this . frame ; } 15. Comment out the + this.pipeWidth in the create pipe method. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 private createPipe ( show : boolean ) : PipePair { const height = this . randomYForTopPipe (); return { topPipe : { top : 0 , height , }, bottomPipe : { top : height , // commnet when done + this.pipeGap, height : this.height , }, left : this.width - this . pipeWidth , // delete line after testing //left: this.width, uncomment this line after testing width : this.pipeWidth , show , }; } 16. Create a pipe component that takes in a PipePair and renders it to the screen. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 < script lang = \"ts\" > import type { PipePair } from \"./game\" ; export let pipe : PipePair ; </ script > < style > . pipe { position : absolute ; background-color : palegreen ; } </ style > {#if pipe.show } < section style = \"left: {pipe.left}px; top: {pipe.topPipe.top}px; width: {pipe.width}px; height: {pipe.topPipe.height}px;\" class = \"top-pipe pipe\" ></ section > < section style = \"left: {pipe.left}px; top: {pipe.bottomPipe.top}px; width: {pipe.width}px; height: {pipe.bottomPipe.height}px;\" class = \"top-bottom pipe\" ></ section > {/if} 18. Create 2 instances of the pipe component and use the frame to pass the pipe pair to them. Refresh page and make sure pipe's height changes. Besure to delete the testing code. 1 2 3 4 < main style = \"width: {frame.width}px; height: {frame.height}px;\" class = \"game\" > < Pipe pipe = \"{frame.firstPipe}\" /> < Pipe pipe = \"{frame.secondPipe}\" /> </ main > 19. Next let's make the pipe move across the screen. We want the second pipe to start moving when the first pipe 70% through. We also want the pipe to disappear when the pipe has completely gone through the game. We'll also need to add parameters to our constructor, speed and generateNewPipePercent. To do this we'll create 2 functions. One called movePipe and one called nextFrame. nextFrame will generate a new frame with the pipe movement will move a pipe pair in x direction. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 constructor ( public readonly height = 800 , public readonly width = 400 , public readonly pipeWidth = 50 , public readonly pipeGap = 150 , public readonly minTopForTopPipe = 70 , public readonly maxTopForTopPipe = 350 , public readonly generateNewPipePercent = 0.7 , public readonly speed = 1 ) {} private movePipe ( pipe : PipePair , otherPipe : PipePair ) { if ( pipe . show && pipe . left <= this . pipeWidth * - 1 ) { pipe . show = false ; return pipe ; } if ( pipe . show ) { pipe . left -= this . speed ; } if ( otherPipe . left < this . width * ( 1 - this . generateNewPipePercent ) && otherPipe . show && ! pipe . show ) { return this . createPipe ( true ); } return pipe ; } public nextFrame () { this . frame . firstPipe = this . movePipe ( this . frame . firstPipe , this . frame . secondPipe ); this . frame . secondPipe = this . movePipe ( this . frame . secondPipe , this . frame . firstPipe ); return this . frame ; } 20. Next create a setInterval in the game component so that nextFrame is called 90 times a second. This will be done in the game component. 1 2 3 setInterval (() => { frame = game . nextFrame (); }, 1000 / 90 ); 21. Add ground height to the constructor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 export class GameController { private frame : Frame ; private velocity = 0 ; constructor ( public readonly height = 800 , public readonly width = 400 , public readonly pipeWidth = 50 , public readonly pipeGap = 150 , public readonly minTopForTopPipe = 70 , public readonly maxTopForTopPipe = 350 , public readonly generateNewPipePercent = 0.7 , public readonly speed = 1 , public readonly groundHeight = 20 ) {} 22. Add the ground interface to our game.ts file. 1 2 3 export interface Ground { height : number ; } 23. Add ad it to the frame and fix our newGame function. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public newGame () { let firstPipe = this . createPipe ( true ); let secondPipe = this . createPipe ( false ); this . frame = { firstPipe , secondPipe , score : 0 , width : this.width , height : this.height , gameOver : false , gameStarted : false , ground : { height : this.groundHeight } }; return this . frame ; } 24. Next use it to render the ground of the svelte game. Add the ground style and use it to render a section at the bottom of the page. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < style > main { position: relative; border: solid black 1px; overflow: hidden; background-color: lightblue; } #ground { background-color: brown; width: 100%; position: absolute; bottom: 0; left: 0; } < style > 1 2 3 ... < section style = \"height: {frame.ground.height}px;\" id = \"ground\" ></ section > </ main > 25. Add the bird interface to the game.ts 1 2 3 4 5 export interface Bird { top : number ; left : number ; size : number ; } 26. Next add birdX, gravity, jumpVelocity, birdSize, and slowVelocityBy to the game controller consturctor. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 constructor ( public readonly height = 800 , public readonly width = 400 , public readonly pipeWidth = 50 , public readonly pipeGap = 150 , public readonly minTopForTopPipe = 70 , public readonly maxTopForTopPipe = 350 , public readonly generateNewPipePercent = 0.7 , public readonly speed = 1 , public readonly groundHeight = 20 , public readonly birdX = 40 , public readonly birdSize = 20 , public readonly gravity = 1.5 , public readonly jumpVelocity = 10 , public readonly slowVelocityBy = 0.3 , ) {} 27. Add the bird to Frame interface. 1 2 3 4 5 6 7 8 9 10 11 export interface Frame { firstPipe : PipePair ; secondPipe : PipePair ; ground : Ground ; bird : Bird ; gameOver : boolean ; gameStarted : boolean ; width : number ; height : number ; score : number ; } 28. Fix the newGame function to include the bird. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public newGame () { let firstPipe = this . createPipe ( true ); let secondPipe = this . createPipe ( false ); this . frame = { firstPipe , secondPipe , score : 0 , width : this.width , height : this.height , gameOver : false , gameStarted : false , ground : { height : this.groundHeight , }, bird : { left : this.birdX , top : this.height / 2 - this . birdSize / 2 , size : this.birdSize , }, }; return this . frame ; } 29. Add a bird svelte component to the game. Bird Svelte 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 < script lang = \"ts\" > import type { Bird } from \"./game\" ; export let bird : Bird ; </ script > < style > # bird { border : solid black 1 px ; background-color : yellow ; position : absolute ; } </ style > < section style = \"width: {bird.size}px; height: {bird.size}px; top: {bird.top}px; left: {bird.left}px;\" id = \"bird\" ></ section > Game.svelte 1 2 3 4 5 6 < main style = \"width: {frame.width}px; height: {frame.height}px;\" class = \"game\" > < Bird bird = \"{frame.bird}\" /> < Pipe pipe = \"{frame.firstPipe}\" /> < Pipe pipe = \"{frame.secondPipe}\" /> < section style = \"height: {frame.ground.height}px;\" id = \"ground\" ></ section > </ main > 30. Add a function to the game controller called jump that will set the velocity to jumpVelocity if it's zero. 1 2 3 4 5 public jump () { if ( this . velocity <= 0 ) { this . velocity += this . jumpVelocity ; } } 31. Next create a window:svelte element and hook up a function to click event that will call someone clicks in the window. 1 2 3 4 5 6 7 8 < script lang = \"ts\" > ... function jump () { game . jump (); } ... </ script > < svelte:window on:click = \"{jump}\" /> 32. Add gravity to the next nextFrame function so that we can test this out. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public nextFrame () { this . frame . firstPipe = this . movePipe ( this . frame . firstPipe , this . frame . secondPipe ); this . frame . secondPipe = this . movePipe ( this . frame . secondPipe , this . frame . firstPipe ); // Gravity section if ( this . velocity > 0 ) { this . velocity -= this . slowVelocityBy ; } this . frame . bird . top += Math . pow ( this . gravity , 2 ) - this . velocity ; return this . frame ; } 33. Stop generating new frames if the game is over. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public nextFrame () { if ( this . frame . gameOver || ! this . frame . gameStarted ) { return this . frame ; } this . frame . firstPipe = this . movePipe ( this . frame . firstPipe , this . frame . secondPipe ); this . frame . secondPipe = this . movePipe ( this . frame . secondPipe , this . frame . firstPipe ); if ( this . velocity > 0 ) { this . velocity -= this . slowVelocityBy ; } this . frame . bird . top += Math . pow ( this . gravity , 2 ) - this . velocity ; return this . frame ; } 33. Add a start function to the game controller. This will create a game with game started. 1 2 3 4 5 public start () { this . newGame (); this . frame . gameStarted = true ; return this . frame ; } 34. Add a button to start the game if the game has not been started. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 < script > function startGame () { frame = game . start (); } </ script > < style > ... # init-screen { user-select : none ; position : absolute ; top : 50 % ; left : 50 % ; transform : translateX ( -50 % ) translateY ( -50 % ); font-family : monospace ; } # init-screen h2 { text-align : center ; } # init-screen button { font-family : monospace ; font-size : 16 px ; border : none ; border-radius : none ; background-color : ghostwhite ; padding : 10 px ; cursor : pointer ; outline : none ; transition : ease-in-out 0.2 s font-size ; display : block ; margin : 0 auto ; } # init-screen button : active , # init-screen button : focus { outline : none ; font-size : 15 px ; } </ style > < main style = \"width: {frame.width}px; height: {frame.height}px;\" class = \"game\" > < section id = \"score\" > {frame.score} </ section > < Bird bind:bird = \"{frame.bird}\" /> < Pipe bind:pipe = \"{frame.firstPipe}\" /> < Pipe bind:pipe = \"{frame.secondPipe}\" /> {#if frame.gameOver || !frame.gameStarted} < section id = \"init-screen\" > < button on:click = \"{startGame}\" > Start Game </ button > </ section > {/if} < section style = \"height: {frame.ground.height}px;\" id = \"ground\" ></ section > </ main > 35. Add if statement to make sure the bird has not hit the ground if it has set gameOver to true. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public nextFrame () { if ( this . frame . gameOver || ! this . frame . gameStarted ) { return this . frame ; } // Move Pipes this . frame . firstPipe = this . movePipe ( this . frame . firstPipe , this . frame . secondPipe ); this . frame . secondPipe = this . movePipe ( this . frame . secondPipe , this . frame . firstPipe ); // Checking if bird hit the ground if ( this . frame . bird . top >= this . height - this . groundHeight - this . birdSize ) { this . frame . bird . top = this . height - this . groundHeight - this . birdSize ; this . frame . gameOver = true ; return this . frame ; } // End Check if bird hit ground // Add gravity and velocity upward if if ( this . velocity > 0 ) { this . velocity -= this . slowVelocityBy ; } this . frame . bird . top += Math . pow ( this . gravity , 2 ) - this . velocity ; // End gravity and velocity upward if return this . frame ; } 36. Check and see if the bird has collided with the pipe. checkPipe checks to see if the bird is between the pipes. Has Collided with pipe will see if the pipe is not between the pipe if it's visible. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 private checkPipe ( left : number ) { return ( left <= this . birdX + this . birdSize && left + this . pipeWidth >= this . birdX ); } private hasCollidedWithPipe () { if ( this . frame . firstPipe . show && this . checkPipe ( this . frame . firstPipe . left ) ) { return ! ( this . frame . bird . top > this . frame . firstPipe . topPipe . height && this . frame . bird . top + this . birdSize < this . frame . firstPipe . bottomPipe . top ); } if ( this . frame . secondPipe . show && this . checkPipe ( this . frame . secondPipe . left ) ) { return ! ( this . frame . bird . top > this . frame . secondPipe . topPipe . height && this . frame . bird . top + this . birdSize < this . frame . secondPipe . bottomPipe . top ); } return false ; } 38. Use the hasCollidedWithPipe function in the nextFrame to see if the game needs to end. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public nextFrame () { if ( this . frame . gameOver || ! this . frame . gameStarted ) { return this . frame ; } this . frame . firstPipe = this . movePipe ( this . frame . firstPipe , this . frame . secondPipe ); this . frame . secondPipe = this . movePipe ( this . frame . secondPipe , this . frame . firstPipe ); if ( this . frame . bird . top >= this . height - this . groundHeight - this . birdSize ) { this . frame . bird . top = this . height - this . groundHeight - this . birdSize ; this . frame . gameOver = true ; return this . frame ; } // Checks if the pipe has collided with the bird if ( this . hasCollidedWithPipe ()) { this . frame . gameOver = true ; return this . frame ; } if ( this . velocity > 0 ) { this . velocity -= this . slowVelocityBy ; } this . frame . bird . top += Math . pow ( this . gravity , 2 ) - this . velocity ; return this . frame ; } 39. Check if the first or second pipe is equal to birdX and if so add one to the score. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 public nextFrame () { if ( this . frame . gameOver || ! this . frame . gameStarted ) { return this . frame ; } this . frame . firstPipe = this . movePipe ( this . frame . firstPipe , this . frame . secondPipe ); this . frame . secondPipe = this . movePipe ( this . frame . secondPipe , this . frame . firstPipe ); if ( this . frame . bird . top >= this . height - this . groundHeight - this . birdSize ) { this . frame . bird . top = this . height - this . groundHeight - this . birdSize ; this . frame . gameOver = true ; return this . frame ; } if ( this . hasCollidedWithPipe ()) { this . frame . gameOver = true ; return this . frame ; } if ( this . velocity > 0 ) { this . velocity -= this . slowVelocityBy ; } // Add score if ( this . frame . firstPipe . left + this . pipeWidth == this . birdX - this . speed ) { this . frame . score += 1 ; } // Add Score if ( this . frame . secondPipe . left + this . pipeWidth == this . birdX - this . speed ) { this . frame . score += 1 ; } this . frame . bird . top += Math . pow ( this . gravity , 2 ) - this . velocity ; return this . frame ; } 40. Display the score in the game. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 < style > ... # score { position : absolute ; right : 10 px ; top : 10 px ; font-size : 20 px ; z-index : 10 ; padding : 5 px ; font-family : cursive ; background-color : white ; user-select : none ; } </ style > < main style = \"width: {frame.width}px; height: {frame.height}px;\" class = \"game\" > < section id = \"score\" > {frame.score} </ section > < Bird bird = \"{frame.bird}\" /> < Pipe pipe = \"{frame.firstPipe}\" /> < Pipe pipe = \"{frame.secondPipe}\" /> {#if frame.gameOver || !frame.gameStarted} < section id = \"init-screen\" > < button on:click = \"{startGame}\" > Start Game </ button > </ section > {/if} < section style = \"height: {frame.ground.height}px;\" id = \"ground\" ></ section > </ main > 41. Add the score to the end game screen. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < style > ... # init-screen h2 { text-align : center ; } ...; </ style > ... {#if frame.gameOver || !frame.gameStarted} < section id = \"init-screen\" > {#if frame.gameOver} < h2 > Game Over </ h2 > < h2 > Score {frame.score} </ h2 > {/if} < button on:click = \"{startGame}\" > Start Game </ button > </ section > {/if} ...","title":"Flappy Bird"},{"location":"flappybird/#how-to-build-a-flappy-bird-game-in-svelte-with-typescript","text":"","title":"How to build a flappy bird game in svelte with typescript"},{"location":"flappybird/#youtube-video","text":"","title":"Youtube Video"},{"location":"flappybird/#final-demo","text":"Demo Code","title":"Final Demo"},{"location":"flappybird/#other-demo","text":"Demo Code","title":"Other Demo"},{"location":"flappybird/#steps","text":"1. Create the svelte project. 1 npx degit sveltejs/template . 2. Turn the project into a typescript project. (It will be nice to have interfaces) 1 node scripts/setupTypeScript.js 3. Run npm install to install the dependencies. 1 npm install 4. Clean up the project Delete everything in the public/global.css Make all the links relative in the public/index.html Change the title in the index.html file to Svelte Flappy Bird Delete everything in our src/App.svelte file index.html file 1 2 3 4 5 6 7 8 9 10 < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width,initial-scale=1\" /> < title > Svelte Flappy Bird </ title > < link rel = \"icon\" type = \"image/png\" href = \"/favicon.png\" /> < link rel = \"stylesheet\" href = \"/global.css\" /> < link rel = \"stylesheet\" href = \"/build/bundle.css\" /> < script defer src = \"/build/bundle.js\" ></ script > 5. Create a file name game.ts and copy the frame interface into file. This is will be used to render the game. 1 2 3 4 5 6 7 export interface Frame { gameOver : boolean ; gameStarted : boolean ; width : number ; height : number ; score : number ; } 6. Create a game class. Is is what is used to generate the frames and is where all of our game logic will be stored. For now our game controller will take in a width and height value. 1 export class GameController {} 7. Let's create a constructor that takes in width, height as public readonly variables. We'll also create private class variables that will store the frame and velocity. 1 2 3 4 5 6 7 class GameController { private frame : Frame ; private velocity = 0 ; constructor ( public readonly height = 800 , public readonly width = 400 ) {} } 8. Create a method called newGame. This will save a new frame to the frame class variable and return the newly created frame. We don't want to start the game until the user presses a button so we'll default gameOver and gameStarted to false. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 export class GameController { private frame : Frame ; private velocity = 0 ; constructor ( public readonly height = 800 , public readonly width = 400 ) {} public newGame () { this . frame = { score : 0 , width : this.width , height : this.height , gameOver : false , gameStarted : false , }; return this . frame ; } } 9. We'll use this create a game.svelte component to render the game onto the screen. Game.svelte 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 < script lang = \"ts\" > import { GameController } from \"./game\" ; const game = new GameController (); let frame = game . newGame (); </ script > < style > main { position : relative ; border : solid black 1 px ; overflow : hidden ; background-color : lightblue ; } </ style > < main style = \"width: {frame.width}px; height: {frame.height}px;\" class = \"game\" ></ main > App.svelte 1 2 3 4 5 < script lang = \"ts\" > import Game from \"./Game.svelte\" ; </ script > < Game /> It should look like this. 10. Add interfaces for the pipes so we can start moving the pipes across the screen. Modify the frame frame to accept 2 pipes. A firstPipe and second Pipe. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 export interface Frame { firstPipe : PipePair ; secondPipe : PipePair ; gameOver : boolean ; gameStarted : boolean ; width : number ; height : number ; score : number ; } export interface PipePair { topPipe : Pipe ; bottomPipe : Pipe ; show : boolean ; left : number ; width : number ; } export interface Pipe { top : number ; height : number ; } 11. Modify the GameController contrustor to take in more pipe parameters. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 export class GameController { private frame : Frame ; private velocity = 0 ; constructor ( public readonly height = 800 , public readonly width = 400 , public readonly pipeWidth = 50 , public readonly pipeGap = 150 , public readonly minTopForTopPipe = 70 , public readonly maxTopForTopPipe = 350 ) {} public newGame () { this . frame = { score : 0 , width : this.width , height : this.height , gameOver : false , gameStarted : false , }; return this . frame ; } } 12. Next create a private method to generate a random length of pipe between our minTopForTopPipe and maxTopForTopPipe. 1 2 3 4 5 6 private randomYForTopPipe () : number { return ( this . minTopForTopPipe + ( this . maxTopForTopPipe - this . minTopForTopPipe ) * Math . random () ); } 13. Using the function created previously we can now create a private method for creating a pipe. Show will determine if the pipe is visible on the screen. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 private createPipe ( show : boolean ) : PipePair { const height = this . randomYForTopPipe (); return { topPipe : { top : 0 , height , }, bottomPipe : { top : height + this . pipeGap , height : this.height , }, left : this.width - this . pipeWidth , width : this.pipeWidth , show , }; } 14. Modify the new game function to create pipe objects. We only want one of the pipes visible to start. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public newGame () { let firstPipe = this . createPipe ( true ); let secondPipe = this . createPipe ( false ); this . frame = { firstPipe , secondPipe , score : 0 , width : this.width , height : this.height , gameOver : false , gameStarted : false , }; return this . frame ; } 15. Comment out the + this.pipeWidth in the create pipe method. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 private createPipe ( show : boolean ) : PipePair { const height = this . randomYForTopPipe (); return { topPipe : { top : 0 , height , }, bottomPipe : { top : height , // commnet when done + this.pipeGap, height : this.height , }, left : this.width - this . pipeWidth , // delete line after testing //left: this.width, uncomment this line after testing width : this.pipeWidth , show , }; } 16. Create a pipe component that takes in a PipePair and renders it to the screen. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 < script lang = \"ts\" > import type { PipePair } from \"./game\" ; export let pipe : PipePair ; </ script > < style > . pipe { position : absolute ; background-color : palegreen ; } </ style > {#if pipe.show } < section style = \"left: {pipe.left}px; top: {pipe.topPipe.top}px; width: {pipe.width}px; height: {pipe.topPipe.height}px;\" class = \"top-pipe pipe\" ></ section > < section style = \"left: {pipe.left}px; top: {pipe.bottomPipe.top}px; width: {pipe.width}px; height: {pipe.bottomPipe.height}px;\" class = \"top-bottom pipe\" ></ section > {/if} 18. Create 2 instances of the pipe component and use the frame to pass the pipe pair to them. Refresh page and make sure pipe's height changes. Besure to delete the testing code. 1 2 3 4 < main style = \"width: {frame.width}px; height: {frame.height}px;\" class = \"game\" > < Pipe pipe = \"{frame.firstPipe}\" /> < Pipe pipe = \"{frame.secondPipe}\" /> </ main > 19. Next let's make the pipe move across the screen. We want the second pipe to start moving when the first pipe 70% through. We also want the pipe to disappear when the pipe has completely gone through the game. We'll also need to add parameters to our constructor, speed and generateNewPipePercent. To do this we'll create 2 functions. One called movePipe and one called nextFrame. nextFrame will generate a new frame with the pipe movement will move a pipe pair in x direction. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 constructor ( public readonly height = 800 , public readonly width = 400 , public readonly pipeWidth = 50 , public readonly pipeGap = 150 , public readonly minTopForTopPipe = 70 , public readonly maxTopForTopPipe = 350 , public readonly generateNewPipePercent = 0.7 , public readonly speed = 1 ) {} private movePipe ( pipe : PipePair , otherPipe : PipePair ) { if ( pipe . show && pipe . left <= this . pipeWidth * - 1 ) { pipe . show = false ; return pipe ; } if ( pipe . show ) { pipe . left -= this . speed ; } if ( otherPipe . left < this . width * ( 1 - this . generateNewPipePercent ) && otherPipe . show && ! pipe . show ) { return this . createPipe ( true ); } return pipe ; } public nextFrame () { this . frame . firstPipe = this . movePipe ( this . frame . firstPipe , this . frame . secondPipe ); this . frame . secondPipe = this . movePipe ( this . frame . secondPipe , this . frame . firstPipe ); return this . frame ; } 20. Next create a setInterval in the game component so that nextFrame is called 90 times a second. This will be done in the game component. 1 2 3 setInterval (() => { frame = game . nextFrame (); }, 1000 / 90 ); 21. Add ground height to the constructor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 export class GameController { private frame : Frame ; private velocity = 0 ; constructor ( public readonly height = 800 , public readonly width = 400 , public readonly pipeWidth = 50 , public readonly pipeGap = 150 , public readonly minTopForTopPipe = 70 , public readonly maxTopForTopPipe = 350 , public readonly generateNewPipePercent = 0.7 , public readonly speed = 1 , public readonly groundHeight = 20 ) {} 22. Add the ground interface to our game.ts file. 1 2 3 export interface Ground { height : number ; } 23. Add ad it to the frame and fix our newGame function. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public newGame () { let firstPipe = this . createPipe ( true ); let secondPipe = this . createPipe ( false ); this . frame = { firstPipe , secondPipe , score : 0 , width : this.width , height : this.height , gameOver : false , gameStarted : false , ground : { height : this.groundHeight } }; return this . frame ; } 24. Next use it to render the ground of the svelte game. Add the ground style and use it to render a section at the bottom of the page. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < style > main { position: relative; border: solid black 1px; overflow: hidden; background-color: lightblue; } #ground { background-color: brown; width: 100%; position: absolute; bottom: 0; left: 0; } < style > 1 2 3 ... < section style = \"height: {frame.ground.height}px;\" id = \"ground\" ></ section > </ main > 25. Add the bird interface to the game.ts 1 2 3 4 5 export interface Bird { top : number ; left : number ; size : number ; } 26. Next add birdX, gravity, jumpVelocity, birdSize, and slowVelocityBy to the game controller consturctor. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 constructor ( public readonly height = 800 , public readonly width = 400 , public readonly pipeWidth = 50 , public readonly pipeGap = 150 , public readonly minTopForTopPipe = 70 , public readonly maxTopForTopPipe = 350 , public readonly generateNewPipePercent = 0.7 , public readonly speed = 1 , public readonly groundHeight = 20 , public readonly birdX = 40 , public readonly birdSize = 20 , public readonly gravity = 1.5 , public readonly jumpVelocity = 10 , public readonly slowVelocityBy = 0.3 , ) {} 27. Add the bird to Frame interface. 1 2 3 4 5 6 7 8 9 10 11 export interface Frame { firstPipe : PipePair ; secondPipe : PipePair ; ground : Ground ; bird : Bird ; gameOver : boolean ; gameStarted : boolean ; width : number ; height : number ; score : number ; } 28. Fix the newGame function to include the bird. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public newGame () { let firstPipe = this . createPipe ( true ); let secondPipe = this . createPipe ( false ); this . frame = { firstPipe , secondPipe , score : 0 , width : this.width , height : this.height , gameOver : false , gameStarted : false , ground : { height : this.groundHeight , }, bird : { left : this.birdX , top : this.height / 2 - this . birdSize / 2 , size : this.birdSize , }, }; return this . frame ; } 29. Add a bird svelte component to the game. Bird Svelte 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 < script lang = \"ts\" > import type { Bird } from \"./game\" ; export let bird : Bird ; </ script > < style > # bird { border : solid black 1 px ; background-color : yellow ; position : absolute ; } </ style > < section style = \"width: {bird.size}px; height: {bird.size}px; top: {bird.top}px; left: {bird.left}px;\" id = \"bird\" ></ section > Game.svelte 1 2 3 4 5 6 < main style = \"width: {frame.width}px; height: {frame.height}px;\" class = \"game\" > < Bird bird = \"{frame.bird}\" /> < Pipe pipe = \"{frame.firstPipe}\" /> < Pipe pipe = \"{frame.secondPipe}\" /> < section style = \"height: {frame.ground.height}px;\" id = \"ground\" ></ section > </ main > 30. Add a function to the game controller called jump that will set the velocity to jumpVelocity if it's zero. 1 2 3 4 5 public jump () { if ( this . velocity <= 0 ) { this . velocity += this . jumpVelocity ; } } 31. Next create a window:svelte element and hook up a function to click event that will call someone clicks in the window. 1 2 3 4 5 6 7 8 < script lang = \"ts\" > ... function jump () { game . jump (); } ... </ script > < svelte:window on:click = \"{jump}\" /> 32. Add gravity to the next nextFrame function so that we can test this out. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public nextFrame () { this . frame . firstPipe = this . movePipe ( this . frame . firstPipe , this . frame . secondPipe ); this . frame . secondPipe = this . movePipe ( this . frame . secondPipe , this . frame . firstPipe ); // Gravity section if ( this . velocity > 0 ) { this . velocity -= this . slowVelocityBy ; } this . frame . bird . top += Math . pow ( this . gravity , 2 ) - this . velocity ; return this . frame ; } 33. Stop generating new frames if the game is over. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public nextFrame () { if ( this . frame . gameOver || ! this . frame . gameStarted ) { return this . frame ; } this . frame . firstPipe = this . movePipe ( this . frame . firstPipe , this . frame . secondPipe ); this . frame . secondPipe = this . movePipe ( this . frame . secondPipe , this . frame . firstPipe ); if ( this . velocity > 0 ) { this . velocity -= this . slowVelocityBy ; } this . frame . bird . top += Math . pow ( this . gravity , 2 ) - this . velocity ; return this . frame ; } 33. Add a start function to the game controller. This will create a game with game started. 1 2 3 4 5 public start () { this . newGame (); this . frame . gameStarted = true ; return this . frame ; } 34. Add a button to start the game if the game has not been started. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 < script > function startGame () { frame = game . start (); } </ script > < style > ... # init-screen { user-select : none ; position : absolute ; top : 50 % ; left : 50 % ; transform : translateX ( -50 % ) translateY ( -50 % ); font-family : monospace ; } # init-screen h2 { text-align : center ; } # init-screen button { font-family : monospace ; font-size : 16 px ; border : none ; border-radius : none ; background-color : ghostwhite ; padding : 10 px ; cursor : pointer ; outline : none ; transition : ease-in-out 0.2 s font-size ; display : block ; margin : 0 auto ; } # init-screen button : active , # init-screen button : focus { outline : none ; font-size : 15 px ; } </ style > < main style = \"width: {frame.width}px; height: {frame.height}px;\" class = \"game\" > < section id = \"score\" > {frame.score} </ section > < Bird bind:bird = \"{frame.bird}\" /> < Pipe bind:pipe = \"{frame.firstPipe}\" /> < Pipe bind:pipe = \"{frame.secondPipe}\" /> {#if frame.gameOver || !frame.gameStarted} < section id = \"init-screen\" > < button on:click = \"{startGame}\" > Start Game </ button > </ section > {/if} < section style = \"height: {frame.ground.height}px;\" id = \"ground\" ></ section > </ main > 35. Add if statement to make sure the bird has not hit the ground if it has set gameOver to true. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public nextFrame () { if ( this . frame . gameOver || ! this . frame . gameStarted ) { return this . frame ; } // Move Pipes this . frame . firstPipe = this . movePipe ( this . frame . firstPipe , this . frame . secondPipe ); this . frame . secondPipe = this . movePipe ( this . frame . secondPipe , this . frame . firstPipe ); // Checking if bird hit the ground if ( this . frame . bird . top >= this . height - this . groundHeight - this . birdSize ) { this . frame . bird . top = this . height - this . groundHeight - this . birdSize ; this . frame . gameOver = true ; return this . frame ; } // End Check if bird hit ground // Add gravity and velocity upward if if ( this . velocity > 0 ) { this . velocity -= this . slowVelocityBy ; } this . frame . bird . top += Math . pow ( this . gravity , 2 ) - this . velocity ; // End gravity and velocity upward if return this . frame ; } 36. Check and see if the bird has collided with the pipe. checkPipe checks to see if the bird is between the pipes. Has Collided with pipe will see if the pipe is not between the pipe if it's visible. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 private checkPipe ( left : number ) { return ( left <= this . birdX + this . birdSize && left + this . pipeWidth >= this . birdX ); } private hasCollidedWithPipe () { if ( this . frame . firstPipe . show && this . checkPipe ( this . frame . firstPipe . left ) ) { return ! ( this . frame . bird . top > this . frame . firstPipe . topPipe . height && this . frame . bird . top + this . birdSize < this . frame . firstPipe . bottomPipe . top ); } if ( this . frame . secondPipe . show && this . checkPipe ( this . frame . secondPipe . left ) ) { return ! ( this . frame . bird . top > this . frame . secondPipe . topPipe . height && this . frame . bird . top + this . birdSize < this . frame . secondPipe . bottomPipe . top ); } return false ; } 38. Use the hasCollidedWithPipe function in the nextFrame to see if the game needs to end. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public nextFrame () { if ( this . frame . gameOver || ! this . frame . gameStarted ) { return this . frame ; } this . frame . firstPipe = this . movePipe ( this . frame . firstPipe , this . frame . secondPipe ); this . frame . secondPipe = this . movePipe ( this . frame . secondPipe , this . frame . firstPipe ); if ( this . frame . bird . top >= this . height - this . groundHeight - this . birdSize ) { this . frame . bird . top = this . height - this . groundHeight - this . birdSize ; this . frame . gameOver = true ; return this . frame ; } // Checks if the pipe has collided with the bird if ( this . hasCollidedWithPipe ()) { this . frame . gameOver = true ; return this . frame ; } if ( this . velocity > 0 ) { this . velocity -= this . slowVelocityBy ; } this . frame . bird . top += Math . pow ( this . gravity , 2 ) - this . velocity ; return this . frame ; } 39. Check if the first or second pipe is equal to birdX and if so add one to the score. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 public nextFrame () { if ( this . frame . gameOver || ! this . frame . gameStarted ) { return this . frame ; } this . frame . firstPipe = this . movePipe ( this . frame . firstPipe , this . frame . secondPipe ); this . frame . secondPipe = this . movePipe ( this . frame . secondPipe , this . frame . firstPipe ); if ( this . frame . bird . top >= this . height - this . groundHeight - this . birdSize ) { this . frame . bird . top = this . height - this . groundHeight - this . birdSize ; this . frame . gameOver = true ; return this . frame ; } if ( this . hasCollidedWithPipe ()) { this . frame . gameOver = true ; return this . frame ; } if ( this . velocity > 0 ) { this . velocity -= this . slowVelocityBy ; } // Add score if ( this . frame . firstPipe . left + this . pipeWidth == this . birdX - this . speed ) { this . frame . score += 1 ; } // Add Score if ( this . frame . secondPipe . left + this . pipeWidth == this . birdX - this . speed ) { this . frame . score += 1 ; } this . frame . bird . top += Math . pow ( this . gravity , 2 ) - this . velocity ; return this . frame ; } 40. Display the score in the game. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 < style > ... # score { position : absolute ; right : 10 px ; top : 10 px ; font-size : 20 px ; z-index : 10 ; padding : 5 px ; font-family : cursive ; background-color : white ; user-select : none ; } </ style > < main style = \"width: {frame.width}px; height: {frame.height}px;\" class = \"game\" > < section id = \"score\" > {frame.score} </ section > < Bird bird = \"{frame.bird}\" /> < Pipe pipe = \"{frame.firstPipe}\" /> < Pipe pipe = \"{frame.secondPipe}\" /> {#if frame.gameOver || !frame.gameStarted} < section id = \"init-screen\" > < button on:click = \"{startGame}\" > Start Game </ button > </ section > {/if} < section style = \"height: {frame.ground.height}px;\" id = \"ground\" ></ section > </ main > 41. Add the score to the end game screen. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < style > ... # init-screen h2 { text-align : center ; } ...; </ style > ... {#if frame.gameOver || !frame.gameStarted} < section id = \"init-screen\" > {#if frame.gameOver} < h2 > Game Over </ h2 > < h2 > Score {frame.score} </ h2 > {/if} < button on:click = \"{startGame}\" > Start Game </ button > </ section > {/if} ...","title":"Steps"},{"location":"webcomponents/","text":"Web Components in Svelte Video Demos HTML HTML Svelte Demo HTML Svelte Demo Code Angular Angular Demo Angular Code React React Demo React Code Vue Vue Demo Vue Code How to create a web component with Svelte 1. Go to the rollup.config.js file in the root of the project. 2. Change the output.file to to the name of the webcomponent you want to export. 1 2 3 4 5 6 output : { sourcemap : true , format : \"iife\" , name : \"app\" , file : \"public/build/count-btn.js\" , }, 3. Change change compiler options to this. 1 2 3 4 5 6 7 svelte ({ compilerOptions : { // enable run-time checks when not in production dev : ! production , customElement : true , }, }), 4. Delete the css plugin below the svelte component. 5. Go to main.js and delete all config in your app component. 1 2 3 4 5 import App from \"./App.svelte\" ; const app = new App (); export default app ; 6. Create the component you want to export in your App.svelte file. You will need to include the svelte:option component with tag prop equaling the name of your component. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 < script > import { onMount } from \"svelte\" ; export let count = 0 ; function onClick () { count = + count + 1 ; } onMount (() => { console . log ( \"can use on mount\" ); }); </ script > < style > button { width : 100 px ; height : 100 px ; } </ style > < button on:click = \"{onClick}\" > Count {count} </ button > < svelte:options tag = \"count-btn\" /> 7. Go you your index.html page and delete the css imports. 8. Include your new component in a defered script tag. 1 < script defer src = \"build/count-btn.js\" ></ script > 9. Use your component in your html 1 < count-btn count = \"30\" ></ count-btn > 10. Run npm run build 11. Run npm start to see your component. Note Everytime you want to see a change you will have to run npm run build. There is probably a way you can watch the file. How to use svelte component in Angular 1. Create a folder in your src called js and copy the web component.js files there. 2. Go to your angular.json file and include the javascript. It's will be under project -> architect -> build -> scripts. 1 2 3 \"scripts\" : [ \"src/js/count-btn.js\" ] 3. Go to src -> app -> app.module.ts and add a custom schema to the ng module. 1 2 3 4 5 6 7 8 9 10 import { CUSTOM_ELEMENTS_SCHEMA , NgModule } from \"@angular/core\" ; @NgModule ({ declarations : [ AppComponent ], imports : [ BrowserModule , AppRoutingModule ], providers : [], bootstrap : [ AppComponent ], schemas : [ CUSTOM_ELEMENTS_SCHEMA ], }) export class AppModule {} 3. Go to your app.compoenent.html file and insert your web component. 1 < count-btn count = \"20\" ></ count-btn > How to use svelte component in React 1. Copy the component js into the public folder. 2. In the index.html file on the public folder include the js you copied with a defer attribute. 1 < script defer src = \"count-btn.js\" ></ script > 3. Use the webcomponent in your App component. 1 2 3 4 5 6 7 8 9 10 11 12 import \"./App.css\" ; function App () { return ( < div className = \"App\" > < h1 > Svelte Component in React App < /h1> < count - btn count = \"3\" >< /count-btn> < /div> ); } export default App ; How to use svelte component in Vue 1. Copy the component js into the public folder. 2. In the index.html file on the public folder include the js you copied with a defer attribute. 1 < script defer src = \"count-btn.js\" ></ script > 3. Use the component in any of the .vue component files. 1 2 3 4 5 6 < template > < div class = \"hello\" > < h1 > Svelte Component in Vue app </ h1 > < count-btn count = \"23\" ></ count-btn > </ div > </ template >","title":"Web Components"},{"location":"webcomponents/#web-components-in-svelte","text":"","title":"Web Components in Svelte"},{"location":"webcomponents/#video","text":"","title":"Video"},{"location":"webcomponents/#demos","text":"","title":"Demos"},{"location":"webcomponents/#html","text":"HTML Svelte Demo HTML Svelte Demo Code","title":"HTML"},{"location":"webcomponents/#angular","text":"Angular Demo Angular Code","title":"Angular"},{"location":"webcomponents/#react","text":"React Demo React Code","title":"React"},{"location":"webcomponents/#vue","text":"Vue Demo Vue Code","title":"Vue"},{"location":"webcomponents/#how-to-create-a-web-component-with-svelte","text":"1. Go to the rollup.config.js file in the root of the project. 2. Change the output.file to to the name of the webcomponent you want to export. 1 2 3 4 5 6 output : { sourcemap : true , format : \"iife\" , name : \"app\" , file : \"public/build/count-btn.js\" , }, 3. Change change compiler options to this. 1 2 3 4 5 6 7 svelte ({ compilerOptions : { // enable run-time checks when not in production dev : ! production , customElement : true , }, }), 4. Delete the css plugin below the svelte component. 5. Go to main.js and delete all config in your app component. 1 2 3 4 5 import App from \"./App.svelte\" ; const app = new App (); export default app ; 6. Create the component you want to export in your App.svelte file. You will need to include the svelte:option component with tag prop equaling the name of your component. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 < script > import { onMount } from \"svelte\" ; export let count = 0 ; function onClick () { count = + count + 1 ; } onMount (() => { console . log ( \"can use on mount\" ); }); </ script > < style > button { width : 100 px ; height : 100 px ; } </ style > < button on:click = \"{onClick}\" > Count {count} </ button > < svelte:options tag = \"count-btn\" /> 7. Go you your index.html page and delete the css imports. 8. Include your new component in a defered script tag. 1 < script defer src = \"build/count-btn.js\" ></ script > 9. Use your component in your html 1 < count-btn count = \"30\" ></ count-btn > 10. Run npm run build 11. Run npm start to see your component.","title":"How to create a web component with Svelte"},{"location":"webcomponents/#note","text":"Everytime you want to see a change you will have to run npm run build. There is probably a way you can watch the file.","title":"Note"},{"location":"webcomponents/#how-to-use-svelte-component-in-angular","text":"1. Create a folder in your src called js and copy the web component.js files there. 2. Go to your angular.json file and include the javascript. It's will be under project -> architect -> build -> scripts. 1 2 3 \"scripts\" : [ \"src/js/count-btn.js\" ] 3. Go to src -> app -> app.module.ts and add a custom schema to the ng module. 1 2 3 4 5 6 7 8 9 10 import { CUSTOM_ELEMENTS_SCHEMA , NgModule } from \"@angular/core\" ; @NgModule ({ declarations : [ AppComponent ], imports : [ BrowserModule , AppRoutingModule ], providers : [], bootstrap : [ AppComponent ], schemas : [ CUSTOM_ELEMENTS_SCHEMA ], }) export class AppModule {} 3. Go to your app.compoenent.html file and insert your web component. 1 < count-btn count = \"20\" ></ count-btn >","title":"How to use svelte component in Angular"},{"location":"webcomponents/#how-to-use-svelte-component-in-react","text":"1. Copy the component js into the public folder. 2. In the index.html file on the public folder include the js you copied with a defer attribute. 1 < script defer src = \"count-btn.js\" ></ script > 3. Use the webcomponent in your App component. 1 2 3 4 5 6 7 8 9 10 11 12 import \"./App.css\" ; function App () { return ( < div className = \"App\" > < h1 > Svelte Component in React App < /h1> < count - btn count = \"3\" >< /count-btn> < /div> ); } export default App ;","title":"How to use svelte component in React"},{"location":"webcomponents/#how-to-use-svelte-component-in-vue","text":"1. Copy the component js into the public folder. 2. In the index.html file on the public folder include the js you copied with a defer attribute. 1 < script defer src = \"count-btn.js\" ></ script > 3. Use the component in any of the .vue component files. 1 2 3 4 5 6 < template > < div class = \"hello\" > < h1 > Svelte Component in Vue app </ h1 > < count-btn count = \"23\" ></ count-btn > </ div > </ template >","title":"How to use svelte component in Vue"},{"location":"firebase-recipe-site/form/","text":"How to use svelte-form-libs, sveltestrap and firestore to save data. Code https://github.com/phptuts/firebase-sveltekit-recipe-site/tree/svelte-form-yt Video Libraries Svelte-Form-Libs Yup sveltestrap Instructions 1. Install Svelte Form Libary 1 npm i svelte-forms-lib yup 2. Clean up the index.svelte page 3. Add Bootstrap app.html 1 2 3 4 5 6 7 8 <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css\" /> <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\" integrity=\"sha512-iBBXm8fW90+nuLcSKlbmrPcLa0OT92xO1BIsZ+ywDWZCvqsWgccV3gFoRBv0z+8dLJgyAHIhR35VZc2oM/gI1w==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" /> 4. Create the starter form in our add-recipe.svelte pageg. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import * as yup from \"yup\" ; import { createForm } from \"svelte-forms-lib\" ; import { Row , Col , Button , FormGroup , Input , Label } from \"sveltestrap/src\" ; const schema = yup . object (). shape ({ title : yup.string (). required (). min ( 4 ). max ( 50 ), description : yup.string (). required (). min ( 10 ). max ( 1000 ), }); const { form , errors , handleChange , handleSubmit } = createForm ({ initialValues : { title : \"\" , description : \"\" , }, validationSchema : schema , onSubmit : ( values ) => { alert ( JSON . stringify ( values )); }, }); 5. Create the HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 < Row > < Col > < FormGroup > < Label for = \"title\" > Title </ Label > < Input on:change = {handleChange} bind:value = {$form.title} invalid = {$errors.title.length > 0} type=\"text\" name=\"title\" id=\"title\" placeholder=\"Recipe Title\" /> {#if $errors.title} < div class = \"invalid-feedback\" > {$errors.title} </ div > {/if} </ FormGroup > </ Col > </ Row > < Row > < Col > < FormGroup > < Label for = \"title\" > Description </ Label > < Input on:change = {handleChange} bind:value = {$form.description} invalid = {$errors.description.length > 0} type=\"textarea\" name=\"description\" id=\"description\" placeholder=\"Recipe Description\" /> {#if $errors.description} < div class = \"invalid-feedback\" > {$errors.description} </ div > {/if} </ FormGroup > </ Col > </ Row > < Row > < Col > < Button on:click = {handleSubmit} class = \"w-100\" color = \"success\" > Submit </ Button > </ Col > </ Row > 6. Add the list of ingredients to our schema. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const schema = yup.object().shape({ title: yup.string().required().min(4).max(50), description: yup.string().required().min(10).max(1000), ingredients: yup .array() .min(1) .max(10) .of( yup.object().shape({ name: yup.string().required().min(2).max(10), unit: yup.mixed().oneOf([\"n/a\", \"ounces\", \"cups\", \"pounds\"]), amount: yup.number().min(1).max(30000), }) ), }); 7. Add the default for the create form. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 const { form , errors , handleChange , handleSubmit } = createForm ({ initialValues : { title : \"\" , description : \"\" , ingredients : [ { name : \"\" , units : \"none\" , amount : 1 , }, ], }, validationSchema : schema , onSubmit : ( values ) => { alert ( JSON . stringify ( values )); }, }); 7. Add the HTML For Ingredients and the button. 1 2 3 4 5 6 7 8 <Row class=\"mb-4 mt-4\"> <Col> <h2>Ingredients</h2> </Col> <Col> <Button class=\"float-end\" color=\"primary\">Add Ingredient</Button> </Col> </Row> 8. Add the loop HTML For the ingredients 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 {#each $form.ingredients as ingredient, i} <Row> <Col sm={5}> <FormGroup> <Label for={`ingredients_${i}_name`}>Name</Label> <Input on:change={handleChange} bind:value={$form.ingredients[i][\"name\"]} invalid={$errors.ingredients[i][\"name\"] && $errors.ingredients[i][\"name\"].length > 0} type=\"text\" name={`ingredients[${i}].name`} id={`ingredients_${i}_name`} placeholder=\"Name\" /> {#if $errors.ingredients[i][\"name\"]} <div class=\"invalid-feedback\">{$errors.ingredients[i][\"name\"]}</div> {/if} </FormGroup> </Col> <Col sm={4}> <FormGroup> <Label for={`ingredients_${i}_units`}>Units</Label> <Input on:change={handleChange} bind:value={$form.ingredients[i][\"units\"]} type=\"select\" name={`ingredients[${i}].units`} id={`ingredients_${i}_units`} > <option value=\"none\">None</option> <option value=\"pounds\">Pounds</option> <option value=\"ounces\">Ounces</option> <option value=\"cups\">Cups</option> </Input> </FormGroup> </Col> <Col sm={2}> <FormGroup> <Label for={`ingredients_${i}_amount`}>Amount</Label> <Input on:change={handleChange} bind:value={$form.ingredients[i][\"amount\"]} invalid={$errors.ingredients[i][\"amount\"] && $errors.ingredients[i][\"amount\"].length > 0} type=\"number\" min=\"1\" max=\"300000\" name={`ingredients[${i}]amount`} id={`ingredients_${i}_amount`} /> {#if $errors.ingredients[i][\"amount\"]} <div class=\"invalid-feedback\">{$errors.ingredients[i][\"amount\"]}</div> {/if} </FormGroup> </Col> <Col sm={1}> <i class=\"fas fa-trash\" on:click={() => removeIngredient(i)} /> </Col> </Row> {/each} <style> .fa-trash { margin-top: 35px; color: rgb(254, 131, 131); cursor: pointer; font-size: 25px; } </style> 9. Add an add function to add ingredients and attach it to the button. 1 2 3 4 5 6 7 8 9 10 11 12 13 const addIngredient = () => { $form . ingredients = $form . ingredients . concat ({ name : \"\" , units : \"none\" , amount : 1 , }); $errors . ingredients = $errors . ingredients . concat ({ name : \"\" , units : \"\" , amount : \"\" , }); }; 1 2 3 < button class = \"float-end\" on:click = \"{addIngredient}\" color = \"primary\" > Add Ingredient </ button > 10. Add a remove column button. 1 2 3 4 const removeIngredient = ( index : number ) => { $form . ingredients = $form . ingredients . filter (( i , j ) => j !== index ); $errors . ingredients = $errors . ingredients . filter (( i , j ) => j !== index ); }; 1 < i class = \"fas fa-trash\" on:click = {() = > removeIngredient(i)} /> 11. Add the error message for when no ingredients are present. 1 2 3 {#if typeof $errors.ingredients === \"string\" && !$errors.ingredients.includes(\"[object\")} <Alert color=\"danger\">{$errors.ingredients}</Alert> {/if} 12. Create a file called db. Here we'll add types and save db function. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import firebase from \"firebase/app\" ; import { firestore } from \"./firestore\" ; export type Ingredient = { name : string ; units : string ; amount : number ; }; export type Recipe = { title : string ; description : string ; userId : string ; createdAt : firebase.firestore.Timestamp | firebase . firestore . FieldValue ; updatedAt : firebase.firestore.Timestamp | firebase . firestore . FieldValue ; ingredients : Ingredient []; }; export type RecipeForm = { title : string ; description : string ; ingredients : Ingredient []; }; export const createRecipe = async ( recipeForm : RecipeForm , userId : string ) => { const recipe : Recipe = { ... recipeForm , userId , createdAt : firebase.firestore.FieldValue.serverTimestamp (), updatedAt : firebase.firestore.FieldValue.serverTimestamp (), }; const db = await firestore (); await db . collection ( \"recipes\" ). add ( recipe ); }; 13. Edit the submit function to save. 1 2 3 4 5 6 7 8 9 10 11 12 import { createRecipe } from \"../db\" ; ... onSubmit : async ( values ) => { try { await createRecipe ( values , $authStore . user . uid ); alert ( \"Saved Recipe\" ); } catch ( e ) { alert ( \"error saving\" ); console . log ( e ); } }, 14. Firestore Rules 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 rules_version = '2'; service cloud.firestore { match /databases/{database}/documents { match /recipes/{document=**} { allow read: if true; allow create: if request.auth != null; } match /private/{document=**} { allow read, write: if request.auth != null; } match /public/{document=**} { allow read: if true; } } }","title":"SvelteKit Forms"},{"location":"firebase-recipe-site/form/#how-to-use-svelte-form-libs-sveltestrap-and-firestore-to-save-data","text":"","title":"How to use svelte-form-libs, sveltestrap and firestore to save data."},{"location":"firebase-recipe-site/form/#code","text":"https://github.com/phptuts/firebase-sveltekit-recipe-site/tree/svelte-form-yt","title":"Code"},{"location":"firebase-recipe-site/form/#video","text":"","title":"Video"},{"location":"firebase-recipe-site/form/#libraries","text":"Svelte-Form-Libs Yup sveltestrap","title":"Libraries"},{"location":"firebase-recipe-site/form/#instructions","text":"1. Install Svelte Form Libary 1 npm i svelte-forms-lib yup 2. Clean up the index.svelte page 3. Add Bootstrap app.html 1 2 3 4 5 6 7 8 <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css\" /> <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\" integrity=\"sha512-iBBXm8fW90+nuLcSKlbmrPcLa0OT92xO1BIsZ+ywDWZCvqsWgccV3gFoRBv0z+8dLJgyAHIhR35VZc2oM/gI1w==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" /> 4. Create the starter form in our add-recipe.svelte pageg. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import * as yup from \"yup\" ; import { createForm } from \"svelte-forms-lib\" ; import { Row , Col , Button , FormGroup , Input , Label } from \"sveltestrap/src\" ; const schema = yup . object (). shape ({ title : yup.string (). required (). min ( 4 ). max ( 50 ), description : yup.string (). required (). min ( 10 ). max ( 1000 ), }); const { form , errors , handleChange , handleSubmit } = createForm ({ initialValues : { title : \"\" , description : \"\" , }, validationSchema : schema , onSubmit : ( values ) => { alert ( JSON . stringify ( values )); }, }); 5. Create the HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 < Row > < Col > < FormGroup > < Label for = \"title\" > Title </ Label > < Input on:change = {handleChange} bind:value = {$form.title} invalid = {$errors.title.length > 0} type=\"text\" name=\"title\" id=\"title\" placeholder=\"Recipe Title\" /> {#if $errors.title} < div class = \"invalid-feedback\" > {$errors.title} </ div > {/if} </ FormGroup > </ Col > </ Row > < Row > < Col > < FormGroup > < Label for = \"title\" > Description </ Label > < Input on:change = {handleChange} bind:value = {$form.description} invalid = {$errors.description.length > 0} type=\"textarea\" name=\"description\" id=\"description\" placeholder=\"Recipe Description\" /> {#if $errors.description} < div class = \"invalid-feedback\" > {$errors.description} </ div > {/if} </ FormGroup > </ Col > </ Row > < Row > < Col > < Button on:click = {handleSubmit} class = \"w-100\" color = \"success\" > Submit </ Button > </ Col > </ Row > 6. Add the list of ingredients to our schema. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const schema = yup.object().shape({ title: yup.string().required().min(4).max(50), description: yup.string().required().min(10).max(1000), ingredients: yup .array() .min(1) .max(10) .of( yup.object().shape({ name: yup.string().required().min(2).max(10), unit: yup.mixed().oneOf([\"n/a\", \"ounces\", \"cups\", \"pounds\"]), amount: yup.number().min(1).max(30000), }) ), }); 7. Add the default for the create form. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 const { form , errors , handleChange , handleSubmit } = createForm ({ initialValues : { title : \"\" , description : \"\" , ingredients : [ { name : \"\" , units : \"none\" , amount : 1 , }, ], }, validationSchema : schema , onSubmit : ( values ) => { alert ( JSON . stringify ( values )); }, }); 7. Add the HTML For Ingredients and the button. 1 2 3 4 5 6 7 8 <Row class=\"mb-4 mt-4\"> <Col> <h2>Ingredients</h2> </Col> <Col> <Button class=\"float-end\" color=\"primary\">Add Ingredient</Button> </Col> </Row> 8. Add the loop HTML For the ingredients 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 {#each $form.ingredients as ingredient, i} <Row> <Col sm={5}> <FormGroup> <Label for={`ingredients_${i}_name`}>Name</Label> <Input on:change={handleChange} bind:value={$form.ingredients[i][\"name\"]} invalid={$errors.ingredients[i][\"name\"] && $errors.ingredients[i][\"name\"].length > 0} type=\"text\" name={`ingredients[${i}].name`} id={`ingredients_${i}_name`} placeholder=\"Name\" /> {#if $errors.ingredients[i][\"name\"]} <div class=\"invalid-feedback\">{$errors.ingredients[i][\"name\"]}</div> {/if} </FormGroup> </Col> <Col sm={4}> <FormGroup> <Label for={`ingredients_${i}_units`}>Units</Label> <Input on:change={handleChange} bind:value={$form.ingredients[i][\"units\"]} type=\"select\" name={`ingredients[${i}].units`} id={`ingredients_${i}_units`} > <option value=\"none\">None</option> <option value=\"pounds\">Pounds</option> <option value=\"ounces\">Ounces</option> <option value=\"cups\">Cups</option> </Input> </FormGroup> </Col> <Col sm={2}> <FormGroup> <Label for={`ingredients_${i}_amount`}>Amount</Label> <Input on:change={handleChange} bind:value={$form.ingredients[i][\"amount\"]} invalid={$errors.ingredients[i][\"amount\"] && $errors.ingredients[i][\"amount\"].length > 0} type=\"number\" min=\"1\" max=\"300000\" name={`ingredients[${i}]amount`} id={`ingredients_${i}_amount`} /> {#if $errors.ingredients[i][\"amount\"]} <div class=\"invalid-feedback\">{$errors.ingredients[i][\"amount\"]}</div> {/if} </FormGroup> </Col> <Col sm={1}> <i class=\"fas fa-trash\" on:click={() => removeIngredient(i)} /> </Col> </Row> {/each} <style> .fa-trash { margin-top: 35px; color: rgb(254, 131, 131); cursor: pointer; font-size: 25px; } </style> 9. Add an add function to add ingredients and attach it to the button. 1 2 3 4 5 6 7 8 9 10 11 12 13 const addIngredient = () => { $form . ingredients = $form . ingredients . concat ({ name : \"\" , units : \"none\" , amount : 1 , }); $errors . ingredients = $errors . ingredients . concat ({ name : \"\" , units : \"\" , amount : \"\" , }); }; 1 2 3 < button class = \"float-end\" on:click = \"{addIngredient}\" color = \"primary\" > Add Ingredient </ button > 10. Add a remove column button. 1 2 3 4 const removeIngredient = ( index : number ) => { $form . ingredients = $form . ingredients . filter (( i , j ) => j !== index ); $errors . ingredients = $errors . ingredients . filter (( i , j ) => j !== index ); }; 1 < i class = \"fas fa-trash\" on:click = {() = > removeIngredient(i)} /> 11. Add the error message for when no ingredients are present. 1 2 3 {#if typeof $errors.ingredients === \"string\" && !$errors.ingredients.includes(\"[object\")} <Alert color=\"danger\">{$errors.ingredients}</Alert> {/if} 12. Create a file called db. Here we'll add types and save db function. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import firebase from \"firebase/app\" ; import { firestore } from \"./firestore\" ; export type Ingredient = { name : string ; units : string ; amount : number ; }; export type Recipe = { title : string ; description : string ; userId : string ; createdAt : firebase.firestore.Timestamp | firebase . firestore . FieldValue ; updatedAt : firebase.firestore.Timestamp | firebase . firestore . FieldValue ; ingredients : Ingredient []; }; export type RecipeForm = { title : string ; description : string ; ingredients : Ingredient []; }; export const createRecipe = async ( recipeForm : RecipeForm , userId : string ) => { const recipe : Recipe = { ... recipeForm , userId , createdAt : firebase.firestore.FieldValue.serverTimestamp (), updatedAt : firebase.firestore.FieldValue.serverTimestamp (), }; const db = await firestore (); await db . collection ( \"recipes\" ). add ( recipe ); }; 13. Edit the submit function to save. 1 2 3 4 5 6 7 8 9 10 11 12 import { createRecipe } from \"../db\" ; ... onSubmit : async ( values ) => { try { await createRecipe ( values , $authStore . user . uid ); alert ( \"Saved Recipe\" ); } catch ( e ) { alert ( \"error saving\" ); console . log ( e ); } }, 14. Firestore Rules 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 rules_version = '2'; service cloud.firestore { match /databases/{database}/documents { match /recipes/{document=**} { allow read: if true; allow create: if request.auth != null; } match /private/{document=**} { allow read, write: if request.auth != null; } match /public/{document=**} { allow read: if true; } } }","title":"Instructions"},{"location":"firebase-recipe-site/login/","text":"Sveltekit Firebase Authenication Recipe Site Code Documentation for SvelteKit Documentation for Firebase Auth Documentation for Sveltestrap SvelteKit Notes app.html in the source folder contains the html wrapper. If you are coming from sapper think of it as template.html layout files look like this __layout.svelte and must contain a slot to render out content from the pages. To create a page put it under the src -> routes folder. SvelteStrap Notes When importing components sveltestrap/src Firebase Initialization Import Firebase from 'firebase/app' for security reasons. It must happen in an on mount The firebase config is publicly available 1 2 3 4 5 6 7 8 9 10 < script > import firebase from 'firebase/app' ; import 'firebase/auth'; onMount(() => { const firebaseConfig = { // fill in your config }; firebase.initializeApp(firebaseConfig); }) Firebase Login with google Wrap in a try catch Error will occur if the user leaves the pageg so don't respond to all errors. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < script lang = \"ts\" > import { Row , Col } from \"sveltestrap\" ; import firebase from \"firebase/app\" ; async function loginWithGoogle () { try { const provider = new firebase . auth . GoogleAuthProvider (); await firebase . auth (). signInWithPopup ( provider ); } catch ( e ) { console . log ( e ); } } </ script > Firebase Authentication Listener and AuthStore AuthStore stores the state of the user using the site. Listener sets the authStore AuthStore uses typescript which helps with documentation. authStore.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { writable } from \"svelte/store\" ; import type firebase from \"firebase/app\" ; const authStore = writable < { isLoggedIn : boolean ; user? : firebase.UserInfo ; firebaseControlled : boolean ; } > ({ isLoggedIn : false , firebaseControlled : false , }); export default { subscribe : authStore.subscribe , set : authStore.set , }; firebase listener 1 2 3 4 5 6 7 firebase . auth (). onAuthStateChanged (( user ) => { authStore . set ({ isLoggedIn : user !== null , user , firebaseControlled : true , }); }); Protected Pages Use the authStore to boot people out of protected pageg. You don't need to wrap it in an onMount so it's ssr safe. 1 2 3 4 5 6 7 import authStore from \"../stores/authStore\" ; authStore . subscribe ( async ({ isLoggedIn , firebaseControlled }) => { if ( ! isLoggedIn && firebaseControlled ) { await goto ( \"/login\" ); } });","title":"SvelteKit Firebase Auth"},{"location":"firebase-recipe-site/login/#sveltekit-firebase-authenication-recipe-site","text":"Code Documentation for SvelteKit Documentation for Firebase Auth Documentation for Sveltestrap","title":"Sveltekit Firebase Authenication Recipe Site"},{"location":"firebase-recipe-site/login/#sveltekit-notes","text":"app.html in the source folder contains the html wrapper. If you are coming from sapper think of it as template.html layout files look like this __layout.svelte and must contain a slot to render out content from the pages. To create a page put it under the src -> routes folder.","title":"SvelteKit Notes"},{"location":"firebase-recipe-site/login/#sveltestrap-notes","text":"When importing components sveltestrap/src","title":"SvelteStrap Notes"},{"location":"firebase-recipe-site/login/#firebase-initialization","text":"Import Firebase from 'firebase/app' for security reasons. It must happen in an on mount The firebase config is publicly available 1 2 3 4 5 6 7 8 9 10 < script > import firebase from 'firebase/app' ; import 'firebase/auth'; onMount(() => { const firebaseConfig = { // fill in your config }; firebase.initializeApp(firebaseConfig); })","title":"Firebase Initialization"},{"location":"firebase-recipe-site/login/#firebase-login-with-google","text":"Wrap in a try catch Error will occur if the user leaves the pageg so don't respond to all errors. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < script lang = \"ts\" > import { Row , Col } from \"sveltestrap\" ; import firebase from \"firebase/app\" ; async function loginWithGoogle () { try { const provider = new firebase . auth . GoogleAuthProvider (); await firebase . auth (). signInWithPopup ( provider ); } catch ( e ) { console . log ( e ); } } </ script >","title":"Firebase Login with google"},{"location":"firebase-recipe-site/login/#firebase-authentication-listener-and-authstore","text":"AuthStore stores the state of the user using the site. Listener sets the authStore AuthStore uses typescript which helps with documentation. authStore.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { writable } from \"svelte/store\" ; import type firebase from \"firebase/app\" ; const authStore = writable < { isLoggedIn : boolean ; user? : firebase.UserInfo ; firebaseControlled : boolean ; } > ({ isLoggedIn : false , firebaseControlled : false , }); export default { subscribe : authStore.subscribe , set : authStore.set , }; firebase listener 1 2 3 4 5 6 7 firebase . auth (). onAuthStateChanged (( user ) => { authStore . set ({ isLoggedIn : user !== null , user , firebaseControlled : true , }); });","title":"Firebase Authentication Listener and AuthStore"},{"location":"firebase-recipe-site/login/#protected-pages","text":"Use the authStore to boot people out of protected pageg. You don't need to wrap it in an onMount so it's ssr safe. 1 2 3 4 5 6 7 import authStore from \"../stores/authStore\" ; authStore . subscribe ( async ({ isLoggedIn , firebaseControlled }) => { if ( ! isLoggedIn && firebaseControlled ) { await goto ( \"/login\" ); } });","title":"Protected Pages"},{"location":"firebase-recipe-site/navbar/","text":"Sveltekit Bootstrap Nav bar 1. Create the navbar in component in components/nav.svelte. You will need to create a folder 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 < script lang = \"ts\" > import { Collapse , Navbar , NavbarToggler , NavbarBrand , Nav , NavItem , NavLink , } from 'sveltestrap/src' ; </ script > < Navbar color = \"light\" light expand = \"md\" > < NavbarBrand href = \"/\" > Recipe Site </ NavbarBrand > < NavbarToggler /> < Collapse navbar expand = \"md\" > < Nav class = \"ms-auto\" navbar > < NavItem > < NavLink href = \"/login\" > Login </ NavLink > </ NavItem > < NavItem > < NavLink > Logout </ NavLink > </ NavItem > </ Nav > </ Collapse > </ Navbar > 2. Include the Navbar in __layout.svelte 1 2 3 4 5 6 < script lang = \"ts\" > import Nav from '../components/nav.svelte' ; </ script > ... < Nav /> 3. Add the Handle function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 < script lang = \"ts\" > import { Collapse , Navbar , NavbarToggler , NavbarBrand , Nav , NavItem , NavLink , } from 'sveltestrap/src' ; // variable that control whether mobile menu is open or closed let isOpen = false ; </ script > < Navbar color = \"light\" light expand = \"md\" > < NavbarBrand href = \"/\" > Recipe Site </ NavbarBrand > < NavbarToggler on:click = {() = > (isOpen = !isOpen)} /> < Collapse { isOpen } navbar expand = \"md\" on:update = \"{handleUpdate}\" > < Nav class = \"ms-auto\" navbar > < NavItem > < NavLink href = \"/login\" > Login </ NavLink > </ NavItem > < NavItem > < NavLink > Logout </ NavLink > </ NavItem > </ Nav > </ Collapse > </ Navbar > 4. Add logic to dynamically display the login and logout 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 < script lang = \"ts\" > import { Collapse , Navbar , NavbarToggler , NavbarBrand , Nav , NavItem , NavLink , } from 'sveltestrap/src' ; import authStore from '../stores/authStore' ; // variable that control whether mobile menu is open or closed let isOpen = false ; </ script > < Navbar color = \"light\" light expand = \"md\" > < NavbarBrand href = \"/\" > Recipe Site </ NavbarBrand > < NavbarToggler on:click = {() = > (isOpen = !isOpen)} /> < Collapse { isOpen } navbar expand = \"md\" > < Nav class = \"ms-auto\" navbar > {#if $authStore.firebaseControlled} {#if !$authStore.isLoggedIn} < NavItem > < NavLink href = \"/login\" > Login </ NavLink > </ NavItem > {:else} < NavItem > < NavLink > Logout </ NavLink > </ NavItem > {/if} {/if} </ Nav > </ Collapse > </ Navbar > 5. Add the logout function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 < script lang = \"ts\" > import { Collapse , Navbar , NavbarToggler , NavbarBrand , Nav , NavItem , NavLink , } from 'sveltestrap/src' ; import authStore from '../stores/authStore' ; import firebase from 'firebase/app' ; // variable that control whether mobile menu is open or closed let isOpen = false ; // handles the logout of async function logout () { await firebase . auth (). signOut (); } </ script > < Navbar color = \"light\" light expand = \"md\" > < NavbarBrand href = \"/\" > Recipe Site </ NavbarBrand > < NavbarToggler on:click = {() = > (isOpen = !isOpen)} /> < Collapse { isOpen } navbar expand = \"md\" > < Nav class = \"ms-auto\" navbar > {#if $authStore.firebaseControlled} {#if !$authStore.isLoggedIn} < NavItem > < NavLink href = \"/login\" > Login </ NavLink > </ NavItem > {:else} < NavItem > < NavLink on:click = {logout} > Logout </ NavLink > </ NavItem > {/if} {/if} </ Nav > </ Collapse > </ Navbar > 6. Add Redirect to Login Page 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 < script lang = \"ts\" > import { Row , Col } from 'sveltestrap' ; import firebase from 'firebase/app' ; import authStore from '../stores/authStore' ; import { goto } from '$app/navigation' ; import { onDestroy } from 'svelte' ; async function loginWithGoogle () { try { const provider = new firebase . auth . GoogleAuthProvider (); await firebase . auth (). signInWithPopup ( provider ); } catch ( e ) { console . log ( e ); } } authStore . subscribe ( async ( info ) => { if ( info . isLoggedIn ) { try { await goto ( '/' ); } catch ( e ) { console . log ( e ) } } }); </ script > < Row > < Col > < h1 > Login with Google </ h1 > </ Col > </ Row > < Row > < Col > < img on:click = {loginWithGoogle} src = \"/login-with-google.png\" alt = \"Login With Google\" /> </ Col > </ Row > < style > img { cursor : pointer ; } </ style > 7. Unsubscribe from authStore when page goes away 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 < script lang = \"ts\" > import { Row , Col } from 'sveltestrap' ; import firebase from 'firebase/app' ; import authStore from '../stores/authStore' ; import { goto } from '$app/navigation' ; import { onDestroy } from 'svelte' ; async function loginWithGoogle () { try { const provider = new firebase . auth . GoogleAuthProvider (); await firebase . auth (). signInWithPopup ( provider ); } catch ( e ) { console . log ( e ); } } const sub = authStore . subscribe ( async ( info ) => { if ( info . isLoggedIn ) { try { await goto ( '/' ); } catch ( e ) { console . log ( e ) } } }); onDestroy (() => { sub (); }); </ script > < Row > < Col > < h1 > Login with Google </ h1 > </ Col > </ Row > < Row > < Col > < img on:click = {loginWithGoogle} src = \"/login-with-google.png\" alt = \"Login With Google\" /> </ Col > </ Row > < style > img { cursor : pointer ; } </ style > 8. Cleanup index.svelte file 1 2 3 4 5 6 7 8 9 < script lang = \"ts\" > import { Row , Col , Button } from 'sveltestrap' ; </ script > < Row > < Col > < h1 > Welcome to the recipe site </ h1 > </ Col > </ Row >","title":"SvelteKit Navbar"},{"location":"firebase-recipe-site/navbar/#sveltekit-bootstrap-nav-bar","text":"1. Create the navbar in component in components/nav.svelte. You will need to create a folder 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 < script lang = \"ts\" > import { Collapse , Navbar , NavbarToggler , NavbarBrand , Nav , NavItem , NavLink , } from 'sveltestrap/src' ; </ script > < Navbar color = \"light\" light expand = \"md\" > < NavbarBrand href = \"/\" > Recipe Site </ NavbarBrand > < NavbarToggler /> < Collapse navbar expand = \"md\" > < Nav class = \"ms-auto\" navbar > < NavItem > < NavLink href = \"/login\" > Login </ NavLink > </ NavItem > < NavItem > < NavLink > Logout </ NavLink > </ NavItem > </ Nav > </ Collapse > </ Navbar > 2. Include the Navbar in __layout.svelte 1 2 3 4 5 6 < script lang = \"ts\" > import Nav from '../components/nav.svelte' ; </ script > ... < Nav /> 3. Add the Handle function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 < script lang = \"ts\" > import { Collapse , Navbar , NavbarToggler , NavbarBrand , Nav , NavItem , NavLink , } from 'sveltestrap/src' ; // variable that control whether mobile menu is open or closed let isOpen = false ; </ script > < Navbar color = \"light\" light expand = \"md\" > < NavbarBrand href = \"/\" > Recipe Site </ NavbarBrand > < NavbarToggler on:click = {() = > (isOpen = !isOpen)} /> < Collapse { isOpen } navbar expand = \"md\" on:update = \"{handleUpdate}\" > < Nav class = \"ms-auto\" navbar > < NavItem > < NavLink href = \"/login\" > Login </ NavLink > </ NavItem > < NavItem > < NavLink > Logout </ NavLink > </ NavItem > </ Nav > </ Collapse > </ Navbar > 4. Add logic to dynamically display the login and logout 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 < script lang = \"ts\" > import { Collapse , Navbar , NavbarToggler , NavbarBrand , Nav , NavItem , NavLink , } from 'sveltestrap/src' ; import authStore from '../stores/authStore' ; // variable that control whether mobile menu is open or closed let isOpen = false ; </ script > < Navbar color = \"light\" light expand = \"md\" > < NavbarBrand href = \"/\" > Recipe Site </ NavbarBrand > < NavbarToggler on:click = {() = > (isOpen = !isOpen)} /> < Collapse { isOpen } navbar expand = \"md\" > < Nav class = \"ms-auto\" navbar > {#if $authStore.firebaseControlled} {#if !$authStore.isLoggedIn} < NavItem > < NavLink href = \"/login\" > Login </ NavLink > </ NavItem > {:else} < NavItem > < NavLink > Logout </ NavLink > </ NavItem > {/if} {/if} </ Nav > </ Collapse > </ Navbar > 5. Add the logout function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 < script lang = \"ts\" > import { Collapse , Navbar , NavbarToggler , NavbarBrand , Nav , NavItem , NavLink , } from 'sveltestrap/src' ; import authStore from '../stores/authStore' ; import firebase from 'firebase/app' ; // variable that control whether mobile menu is open or closed let isOpen = false ; // handles the logout of async function logout () { await firebase . auth (). signOut (); } </ script > < Navbar color = \"light\" light expand = \"md\" > < NavbarBrand href = \"/\" > Recipe Site </ NavbarBrand > < NavbarToggler on:click = {() = > (isOpen = !isOpen)} /> < Collapse { isOpen } navbar expand = \"md\" > < Nav class = \"ms-auto\" navbar > {#if $authStore.firebaseControlled} {#if !$authStore.isLoggedIn} < NavItem > < NavLink href = \"/login\" > Login </ NavLink > </ NavItem > {:else} < NavItem > < NavLink on:click = {logout} > Logout </ NavLink > </ NavItem > {/if} {/if} </ Nav > </ Collapse > </ Navbar > 6. Add Redirect to Login Page 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 < script lang = \"ts\" > import { Row , Col } from 'sveltestrap' ; import firebase from 'firebase/app' ; import authStore from '../stores/authStore' ; import { goto } from '$app/navigation' ; import { onDestroy } from 'svelte' ; async function loginWithGoogle () { try { const provider = new firebase . auth . GoogleAuthProvider (); await firebase . auth (). signInWithPopup ( provider ); } catch ( e ) { console . log ( e ); } } authStore . subscribe ( async ( info ) => { if ( info . isLoggedIn ) { try { await goto ( '/' ); } catch ( e ) { console . log ( e ) } } }); </ script > < Row > < Col > < h1 > Login with Google </ h1 > </ Col > </ Row > < Row > < Col > < img on:click = {loginWithGoogle} src = \"/login-with-google.png\" alt = \"Login With Google\" /> </ Col > </ Row > < style > img { cursor : pointer ; } </ style > 7. Unsubscribe from authStore when page goes away 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 < script lang = \"ts\" > import { Row , Col } from 'sveltestrap' ; import firebase from 'firebase/app' ; import authStore from '../stores/authStore' ; import { goto } from '$app/navigation' ; import { onDestroy } from 'svelte' ; async function loginWithGoogle () { try { const provider = new firebase . auth . GoogleAuthProvider (); await firebase . auth (). signInWithPopup ( provider ); } catch ( e ) { console . log ( e ); } } const sub = authStore . subscribe ( async ( info ) => { if ( info . isLoggedIn ) { try { await goto ( '/' ); } catch ( e ) { console . log ( e ) } } }); onDestroy (() => { sub (); }); </ script > < Row > < Col > < h1 > Login with Google </ h1 > </ Col > </ Row > < Row > < Col > < img on:click = {loginWithGoogle} src = \"/login-with-google.png\" alt = \"Login With Google\" /> </ Col > </ Row > < style > img { cursor : pointer ; } </ style > 8. Cleanup index.svelte file 1 2 3 4 5 6 7 8 9 < script lang = \"ts\" > import { Row , Col , Button } from 'sveltestrap' ; </ script > < Row > < Col > < h1 > Welcome to the recipe site </ h1 > </ Col > </ Row >","title":"Sveltekit Bootstrap Nav bar"},{"location":"firebase-recipe-site/ssr/","text":"Sveltekit Firebase Authenication Recipe Site Code Firestore Docs Notes SSR means that all the html is rendered by the server. Benefits SEO and Social Media Sharing. This example does not work with admin becuase it does not account for login. If you want it to work with login you will have to validate the firebase jwt token and recreate your firebase firestore rules in code. Firebase Rules 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 rules_version = '2'; service cloud.firestore { match /databases/{database}/documents { match /recipes/{document=**} { allow read: if true; allow create: if request.auth != null; } match /private/{document=**} { allow read, write: if request.auth != null; } match /public/{document=**} { allow read: if true; } } }","title":"SvelteKit Firebase SSR"},{"location":"firebase-recipe-site/ssr/#sveltekit-firebase-authenication-recipe-site","text":"Code Firestore Docs","title":"Sveltekit Firebase Authenication Recipe Site"},{"location":"firebase-recipe-site/ssr/#notes","text":"SSR means that all the html is rendered by the server. Benefits SEO and Social Media Sharing. This example does not work with admin becuase it does not account for login. If you want it to work with login you will have to validate the firebase jwt token and recreate your firebase firestore rules in code.","title":"Notes"},{"location":"firebase-recipe-site/ssr/#firebase-rules","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 rules_version = '2'; service cloud.firestore { match /databases/{database}/documents { match /recipes/{document=**} { allow read: if true; allow create: if request.auth != null; } match /private/{document=**} { allow read, write: if request.auth != null; } match /public/{document=**} { allow read: if true; } } }","title":"Firebase Rules"},{"location":"firebase-recipe-site/upload-picture/","text":"Uplaoding Pictures to Firebase Video Code https://github.com/phptuts/firebase-sveltekit-recipe-site/commit/8392d79eb6b3cf99fc62eb1228905b033b9e0dbb Errors Fixed the form schema change unit to units Fixed n\\a to none in the oneOf in the form schema Fixed the error for checking if the error exists in the array Steps 1. Import the firebase storage and extra protection for initialize the app a second time. 1 2 3 4 await import ( \"firebase/storage\" ); if ( fb . apps . length == 0 ) { fb . initializeApp ( firebaseConfig ); } 2. Add File validator with yup.ts and import into add-recipe.svelte page. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import * as yup from \"yup\" ; yup . addMethod ( yup . mixed , \"fileMax\" , function ( args ) { const { maxBytes , message } = args ; return this . test ( \"fileMax\" , message , function ( value ) { if ( ! value || value instanceof File === false ) { return true ; } return Math . round ( value . size / 1024 ) < maxBytes ; }); }); yup . addMethod ( yup . mixed , \"fileFormat\" , function ( args ) { const { formats , message } = args ; return this . test ( \"fileFormat\" , message , function ( value ) { if ( ! value || value instanceof File === false ) { return true ; } return formats . includes ( value . type ); }); }); 3. Import it into add-recipe.svelte file 1 import \"../yup.ts.\" ; 4. Add it to our form schema. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 const schema = yup . object (). shape ({ title : yup.string (). required (). min ( 4 ). max ( 50 ), description : yup.string (). required (). min ( 10 ). max ( 1000 ), ingredients : yup . array () . min ( 1 ) . max ( 10 ) . of ( yup . object (). shape ({ name : yup.string (). required (). min ( 2 ). max ( 10 ), unit : yup.mixed (). oneOf ([ \"none\" , \"ounces\" , \"cups\" , \"pounds\" ]), amount : yup.number (). min ( 1 ). max ( 30000 ), }) ), mainPicture : yup . mixed () . required ( \"Picture Required\" ) . fileMax ({ maxBytes : 50000 , message : \"Max Image size is 50MB\" , }) . fileFormat ({ formats : [ \"image/gif\" , \"image/jpeg\" , \"image/png\" ], message : \"Images can only be png, gif, jpg\" , }), }); 5. Add mainPicture to the default value. 1 2 3 4 5 6 7 8 9 10 11 12 13 // ... initialValues : { title : \"\" , description : \"\" , ingredients : [ { name : \"\" , units : \"none\" , amount : 1 , }, ], mainPicture : null }, 6. Add a form field. We updating the field with the file and not the just the value because we want the validation to validate the file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <Row> <Col> <FormGroup> <Label for=\"title\">Main Picture</Label> <Input on:change={(e) => updateValidateField(\"mainPicture\", e.target.files[0])} invalid={$errors.mainPicture.length > 0} type=\"file\" name=\"mainPicture\" id=\"mainPicture\" /> {#if $errors.mainPicture} <div class=\"invalid-feedback\">{$errors.mainPicture}</div> {/if} </FormGroup> </Col> </Row> 7. Change the recipe form type to accept and file 1 2 3 4 5 6 export type RecipeForm = { title : string ; mainPicture : File ; description : string ; ingredients : Ingredient []; }; 8. Add the uploadFile and getUrl functions 1 2 3 4 5 6 7 8 9 10 11 12 const uploadFile = async ( recipeId : string , userId : string , pic : File ) => { const mainPicturePath = `/ ${ userId } / ${ recipeId } . ${ pic . name . split ( \".\" ). pop () } ` ; const storage = firebase . storage (); const ref = storage . ref ( mainPicturePath ); await ref . put ( pic ); return mainPicturePath ; }; export const getUrl = async ( path : string ) => { const storage = firebase . storage (); return await storage . ref ( path ). getDownloadURL (); }; 9. Modify the createRecipe function to save the picture. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 export const createRecipe = async ( recipeForm : RecipeForm , userId : string ) => { const recipe : Recipe = { title : recipeForm.title , description : recipeForm.description , ingredients : recipeForm.ingredients , userId , createdAt : firebase.firestore.FieldValue.serverTimestamp (), updatedAt : firebase.firestore.FieldValue.serverTimestamp (), }; const db = await firestore (); const recipeRef = await db . collection ( \"recipes\" ). add ( recipe ); const path = await uploadFile ( recipeRef . id , userId , recipeForm . mainPicture ); const url = await getUrl ( path ); recipeRef . update ( \"picture\" , url ); return recipeRef ; }; 10. Try saving and notice it fails. It fails because we don't all the collection to be updated. Update your firebase storage rule and firestore rules to fix this. Firestore 1 2 3 4 5 match /recipes/{document=**} { allow read: if true; allow create: if request.auth != null; allow update: if request.auth != null && request.auth.uid == resource.data.userId; } Firestorage 1 2 3 4 5 6 7 8 9 10 11 rules_version = '2'; service firebase.storage { match /b/{bucket}/o { match /{allPaths=**} { allow read: if true; } match/{userId}/{allPaths=**} { allow write: if request.auth != null && request.auth.uid == userId; } } }","title":"SvelteKit FireStorage"},{"location":"firebase-recipe-site/upload-picture/#uplaoding-pictures-to-firebase","text":"","title":"Uplaoding Pictures to Firebase"},{"location":"firebase-recipe-site/upload-picture/#video","text":"","title":"Video"},{"location":"firebase-recipe-site/upload-picture/#code","text":"https://github.com/phptuts/firebase-sveltekit-recipe-site/commit/8392d79eb6b3cf99fc62eb1228905b033b9e0dbb","title":"Code"},{"location":"firebase-recipe-site/upload-picture/#errors","text":"Fixed the form schema change unit to units Fixed n\\a to none in the oneOf in the form schema Fixed the error for checking if the error exists in the array","title":"Errors"},{"location":"firebase-recipe-site/upload-picture/#steps","text":"1. Import the firebase storage and extra protection for initialize the app a second time. 1 2 3 4 await import ( \"firebase/storage\" ); if ( fb . apps . length == 0 ) { fb . initializeApp ( firebaseConfig ); } 2. Add File validator with yup.ts and import into add-recipe.svelte page. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import * as yup from \"yup\" ; yup . addMethod ( yup . mixed , \"fileMax\" , function ( args ) { const { maxBytes , message } = args ; return this . test ( \"fileMax\" , message , function ( value ) { if ( ! value || value instanceof File === false ) { return true ; } return Math . round ( value . size / 1024 ) < maxBytes ; }); }); yup . addMethod ( yup . mixed , \"fileFormat\" , function ( args ) { const { formats , message } = args ; return this . test ( \"fileFormat\" , message , function ( value ) { if ( ! value || value instanceof File === false ) { return true ; } return formats . includes ( value . type ); }); }); 3. Import it into add-recipe.svelte file 1 import \"../yup.ts.\" ; 4. Add it to our form schema. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 const schema = yup . object (). shape ({ title : yup.string (). required (). min ( 4 ). max ( 50 ), description : yup.string (). required (). min ( 10 ). max ( 1000 ), ingredients : yup . array () . min ( 1 ) . max ( 10 ) . of ( yup . object (). shape ({ name : yup.string (). required (). min ( 2 ). max ( 10 ), unit : yup.mixed (). oneOf ([ \"none\" , \"ounces\" , \"cups\" , \"pounds\" ]), amount : yup.number (). min ( 1 ). max ( 30000 ), }) ), mainPicture : yup . mixed () . required ( \"Picture Required\" ) . fileMax ({ maxBytes : 50000 , message : \"Max Image size is 50MB\" , }) . fileFormat ({ formats : [ \"image/gif\" , \"image/jpeg\" , \"image/png\" ], message : \"Images can only be png, gif, jpg\" , }), }); 5. Add mainPicture to the default value. 1 2 3 4 5 6 7 8 9 10 11 12 13 // ... initialValues : { title : \"\" , description : \"\" , ingredients : [ { name : \"\" , units : \"none\" , amount : 1 , }, ], mainPicture : null }, 6. Add a form field. We updating the field with the file and not the just the value because we want the validation to validate the file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <Row> <Col> <FormGroup> <Label for=\"title\">Main Picture</Label> <Input on:change={(e) => updateValidateField(\"mainPicture\", e.target.files[0])} invalid={$errors.mainPicture.length > 0} type=\"file\" name=\"mainPicture\" id=\"mainPicture\" /> {#if $errors.mainPicture} <div class=\"invalid-feedback\">{$errors.mainPicture}</div> {/if} </FormGroup> </Col> </Row> 7. Change the recipe form type to accept and file 1 2 3 4 5 6 export type RecipeForm = { title : string ; mainPicture : File ; description : string ; ingredients : Ingredient []; }; 8. Add the uploadFile and getUrl functions 1 2 3 4 5 6 7 8 9 10 11 12 const uploadFile = async ( recipeId : string , userId : string , pic : File ) => { const mainPicturePath = `/ ${ userId } / ${ recipeId } . ${ pic . name . split ( \".\" ). pop () } ` ; const storage = firebase . storage (); const ref = storage . ref ( mainPicturePath ); await ref . put ( pic ); return mainPicturePath ; }; export const getUrl = async ( path : string ) => { const storage = firebase . storage (); return await storage . ref ( path ). getDownloadURL (); }; 9. Modify the createRecipe function to save the picture. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 export const createRecipe = async ( recipeForm : RecipeForm , userId : string ) => { const recipe : Recipe = { title : recipeForm.title , description : recipeForm.description , ingredients : recipeForm.ingredients , userId , createdAt : firebase.firestore.FieldValue.serverTimestamp (), updatedAt : firebase.firestore.FieldValue.serverTimestamp (), }; const db = await firestore (); const recipeRef = await db . collection ( \"recipes\" ). add ( recipe ); const path = await uploadFile ( recipeRef . id , userId , recipeForm . mainPicture ); const url = await getUrl ( path ); recipeRef . update ( \"picture\" , url ); return recipeRef ; }; 10. Try saving and notice it fails. It fails because we don't all the collection to be updated. Update your firebase storage rule and firestore rules to fix this. Firestore 1 2 3 4 5 match /recipes/{document=**} { allow read: if true; allow create: if request.auth != null; allow update: if request.auth != null && request.auth.uid == resource.data.userId; } Firestorage 1 2 3 4 5 6 7 8 9 10 11 rules_version = '2'; service firebase.storage { match /b/{bucket}/o { match /{allPaths=**} { allow read: if true; } match/{userId}/{allPaths=**} { allow write: if request.auth != null && request.auth.uid == userId; } } }","title":"Steps"}]}